package io.cryptobot.binance.trading.monitoring;

import io.cryptobot.binance.trade.session.enums.SessionMode;
import io.cryptobot.binance.trade.session.enums.TradingDirection;
import io.cryptobot.binance.trade.session.model.TradeOrder;
import io.cryptobot.binance.trade.session.model.TradeSession;
import io.cryptobot.binance.trade.session.service.TradeSessionService;
import io.cryptobot.binance.trading.updates.TradingUpdatesService;
import io.cryptobot.market_data.ticker24h.Ticker24hService;
import io.cryptobot.binance.order.enums.OrderStatus;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;
import io.cryptobot.binance.trade.session.enums.SessionStatus;
import io.cryptobot.binance.order.enums.OrderPurpose;

@Service
@RequiredArgsConstructor
@Slf4j
public class MonitoringServiceImpl implements MonitoringService {
    private final TradeSessionService sessionService;
    private final Ticker24hService ticker24hService;
    private final TradingUpdatesService tradingUpdatesService;

    private final Map<String, TradeSession> sessions = new HashMap<>();

    @PostConstruct
    public void init() {
        List<TradeSession> ses = sessionService.getAllActive();
        for (TradeSession tradeSession : ses) {
            sessions.put(tradeSession.getId(), tradeSession);
        }

    }

    @Override
    public void addToMonitoring(TradeSession tradeSession) {
        sessions.put(tradeSession.getId(), tradeSession);
    }

    @Scheduled(fixedRate = 1_000)
    public void monitor() {
//        List<TradeSession>//todo
        Collection<TradeSession> activeSessions = sessions.values();

        for (TradeSession session : activeSessions) {
            try {
                monitorSession(session);
            } catch (Exception e) {
                log.error("‚ùå Error monitoring session {}: {}", session.getId(), e.getMessage(), e);
            }
        }
    }

    private void monitorSession(TradeSession session) {
        log.debug("üîç Starting monitoring for session {} (mode: {}, direction: {})",
                session.getId(), session.getCurrentMode(), session.getDirection());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è
        if (session.isProcessing()) {
            log.debug("‚è≥ Session {} is already being processed, skipping", session.getId());
            return;
        }

        // 1. –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        BigDecimal price = ticker24hService.getPrice(session.getTradePlan());
        if (price == null) {
            log.warn("‚ö†Ô∏è Session {}: Failed to get price, skipping monitoring", session.getId());
            return;
        }
        log.debug("üí∞ Session {}: Current price = {}", session.getId(), price);

        // 2. –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        TradeOrder activeOrder = getActiveOrderForMonitoring(session);
        if (activeOrder == null || activeOrder.getPrice() == null || activeOrder.getPrice().compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ö†Ô∏è Session {}: No active order found for monitoring, skipping", session.getId());
            return;
        }
        BigDecimal entryPrice = activeOrder.getPrice();
        log.debug("üìä Session {}: Active order entry price = {} (orderId: {})", 
                session.getId(), entryPrice, activeOrder.getOrderId());

        // 3. PnL –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python)
        BigDecimal pnl;
        if (activeOrder.getDirection() == TradingDirection.LONG) {
            // LONG: ((current_price - entry_price) / entry_price * 100)
            pnl = price.subtract(entryPrice)
                    .divide(entryPrice, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
            } else {
            // SHORT: ((entry_price - current_price) / entry_price * 100)
            pnl = entryPrice.subtract(price)
                    .divide(entryPrice, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
        }
        log.info("üìà Session {} ACTIVE PnL={}% (price: {}, entry: {})",
                session.getId(), pnl, price, entryPrice);

        // === –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê (–∫–∞–∫ –≤ Python) ===
        boolean bothActive = session.hasBothPositionsActive();
        boolean anyActive = session.hasActivePosition();

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ - —Ä–µ–∂–∏–º –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π
        if (bothActive) {
            log.debug("üõ°Ô∏è Session {}: Two positions active - HEDGING mode", session.getId());
            applyTwoPositionsLogic(session, price);
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è - —Ä–µ–∂–∏–º –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        else if (anyActive) {
            log.debug("üéØ Session {}: Single position active - SCALPING mode", session.getId());
            applySinglePositionLogic(session, price, activeOrder, pnl);
        }
        else {
            log.debug("‚è≥ Session {}: No active positions", session.getId());
        }



        log.debug("‚úÖ Session {}: Monitoring cycle completed successfully", session.getId());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
     */
    private boolean checkTrailing(TradeOrder order, BigDecimal currentPnl) {
        if (currentPnl.compareTo(order.getPnlHigh() != null ? order.getPnlHigh() : BigDecimal.ZERO) > 0) {
            order.setPnlHigh(currentPnl);
        }

        // –¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ PnL >= 0.15%
        if (currentPnl.compareTo(BigDecimal.valueOf(0.15)) >= 0 && !order.getTrailingActive()) {
            log.info("üöÄ ACTIVATE trailing (PnL: {}%)", currentPnl);
            order.setTrailingActive(true);
            order.setPnlHigh(currentPnl);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞—Ç 20% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
        if (order.getTrailingActive() && order.getPnlHigh() != null) {
            BigDecimal retrace = order.getPnlHigh().multiply(BigDecimal.valueOf(0.8));
            if (currentPnl.compareTo(retrace) <= 0) {
                log.info("üìâ TRAILING RETRACE (high: {}%, current: {}%, retrace: {}%)",
                        order.getPnlHigh(),
                        currentPnl,
                        retrace);
                order.setTrailingActive(false);
                return true; // –ù—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
            }
        }

        return false;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    private void startTracking(TradeOrder order, BigDecimal basePnl) {
        order.setBasePnl(basePnl);
        order.setMaxChangePnl(BigDecimal.ZERO);
        log.info("üìä Session {} ‚Üí START TRACKING at {}%", order.getOrderId(), basePnl);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
     */
    private void executeClosePosition(TradeSession session, TradeOrder orderToClose, SessionMode sessionMode, String reason) {
        try {
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            session.setProcessing(true);
            
            log.info("üîß Executing close position for session {}: orderId={}, reason={}", 
                    session.getId(), orderToClose.getOrderId(), reason);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OrderPurpose –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
            OrderPurpose orderPurpose;
            if (orderToClose.getPurpose() == OrderPurpose.MAIN_OPEN) {
                orderPurpose = OrderPurpose.MAIN_CLOSE;
            } else if (orderToClose.getPurpose() == OrderPurpose.HEDGE_OPEN) {
                orderPurpose = OrderPurpose.HEDGE_CLOSE;
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º HEDGE_CLOSE –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                orderPurpose = OrderPurpose.HEDGE_CLOSE;
                log.warn("‚ö†Ô∏è Unknown order purpose for order {}, using HEDGE_CLOSE", orderToClose.getOrderId());
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            TradeSession updatedSession = tradingUpdatesService.closePosition(
                    session, sessionMode, orderToClose.getOrderId(), 
                    orderToClose.getRelatedHedgeId(), orderToClose.getDirection(), 
                    orderPurpose, ticker24hService.getPrice(session.getTradePlan()), 
                    "monitoring_" + reason
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            updateSessionInMonitoring(updatedSession);
            
        } catch (Exception e) {
            log.error("‚ùå Error executing close position for session {}: {}", session.getId(), e.getMessage(), e);
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            session.setProcessing(false);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
     */
    private void executeOpenHedge(TradeSession session, TradingDirection hedgeDirection, String purpose, BigDecimal currentPrice, String reason) {
        try {
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            session.setProcessing(true);
            
            log.info("üîß Executing open hedge for session {}: direction={}, reason={}", 
                    session.getId(), hedgeDirection, reason);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–∂–∞
            TradeSession updatedSession = tradingUpdatesService.openPosition(
                    session, SessionMode.HEDGING, hedgeDirection, 
                    OrderPurpose.HEDGE_OPEN, currentPrice, 
                    "monitoring_" + reason, session.getMainOrder().getOrderId(), null
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            updateSessionInMonitoring(updatedSession);
            
        } catch (Exception e) {
            log.error("‚ùå Error executing open hedge for session {}: {}", session.getId(), e.getMessage(), e);
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            session.setProcessing(false);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    private void updateSessionInMonitoring(TradeSession updatedSession) {
        if (updatedSession != null) {
            if (updatedSession.getStatus() == SessionStatus.COMPLETED) {
                // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                sessions.remove(updatedSession.getId());
                log.info("‚úÖ Session {} completed and removed from monitoring", updatedSession.getId());
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                sessions.put(updatedSession.getId(), updatedSession);
                log.info("‚úÖ Session {} updated in monitoring", updatedSession.getId());
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç, –Ω–æ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ö–µ–¥–∂ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–µ–¥–∂
     * –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
     */
    private TradeOrder getActiveOrderForMonitoring(TradeSession session) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏, –∞ –Ω–µ –Ω–∞–ª–∏—á–∏—è —Ü–µ–Ω—ã —É –æ—Ä–¥–µ—Ä–∞
        boolean activeLong = session.isActiveLong();
        boolean activeShort = session.isActiveShort();

        if (!activeLong && !activeShort) {
            return null;
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ LONG –ø–æ–∑–∏—Ü–∏—è
        if (activeLong && !activeShort) {
            if (session.getDirection() == TradingDirection.LONG) {
                return session.getMainOrder();
            } else {
                return getLastFilledHedgeOrderByDirection(session, TradingDirection.LONG);
            }
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ SHORT –ø–æ–∑–∏—Ü–∏—è
        if (activeShort && !activeLong) {
            if (session.getDirection() == TradingDirection.SHORT) {
                return session.getMainOrder();
            } else {
                return getLastFilledHedgeOrderByDirection(session, TradingDirection.SHORT);
            }
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –æ–±–µ ‚Äî –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–µ—Ä–Ω–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        return session.getMainOrder();
    }

    private TradeOrder getLastFilledHedgeOrderByDirection(TradeSession session, TradingDirection direction) {
        return session.getOrders().stream()
                .filter(o -> OrderPurpose.HEDGE_OPEN.equals(o.getPurpose()))
                .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                .filter(o -> direction.equals(o.getDirection()))
                .max(Comparator.comparing(TradeOrder::getOrderTime))
                .orElse(null);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * (–∫–∞–∫ –≤ Python: active_positions["long"] –∏ active_positions["short"])
     */
    private boolean hasActivePositions(TradeSession session) {
        TradeOrder mainOrder = session.getMainOrder();
        TradeOrder hedgeOrder = session.getLastHedgeOrder();
        
        boolean hasMain = mainOrder != null && mainOrder.getPrice() != null && mainOrder.getPrice().compareTo(BigDecimal.ZERO) > 0;
        boolean hasHedge = hedgeOrder != null && hedgeOrder.getPrice() != null && hedgeOrder.getPrice().compareTo(BigDecimal.ZERO) > 0;
        
        return hasMain || hasHedge;
    }

    /**
     * –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∫ –≤ Python apply_single_position_logic)
     */
    private void applySinglePositionLogic(TradeSession session, BigDecimal price, TradeOrder activeOrder, BigDecimal pnl) {
        // === –¢–†–ï–ô–õ–ò–ù–ì ===
        if (checkTrailing(activeOrder, pnl)) {
            log.info("üìâ Session {} ‚Üí CLOSE POSITION (TRAILING)", session.getId());
            executeClosePosition(session, activeOrder, SessionMode.SCALPING, "TRAILING");
            return;
        }

                            // === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ PnL <= -0.3% ===
        if (pnl.compareTo(BigDecimal.valueOf(-0.3)) > 0) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º tracking –µ—Å–ª–∏ PnL > -0.3%
            activeOrder.setBasePnl(null);
            activeOrder.setMaxChangePnl(null);
        } else {
            // === –ï—Å–ª–∏ tracking –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º ===
            if (activeOrder.getBasePnl() == null) {
                startTracking(activeOrder, pnl);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tracking –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω
            if (activeOrder.getBasePnl() == null) {
                return;
            }

            BigDecimal delta = pnl.subtract(activeOrder.getBasePnl());

            // ‚úÖ –£—Ö—É–¥—à–µ–Ω–∏–µ -0.1% ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ö–µ–¥–∂ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            if (delta.compareTo(BigDecimal.valueOf(-0.1)) <= 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–≤–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∫ –≤ Python)
                if (session.hasBothPositionsActive()) {
                    log.warn("‚ö†Ô∏è Session {} ‚Üí HEDGE BLOCKED (two positions already active)", session.getId());
                    return;
                }
                
                log.info("üõ°Ô∏è Session {} ‚Üí OPEN HEDGE (worsening {}% from {}%)",
                        session.getId(), delta,
                        activeOrder.getBasePnl());
                TradingDirection hedgeDirection = getOppositeDirection(activeOrder.getDirection());
                executeOpenHedge(session, hedgeDirection, "HEDGE_OPEN", price, "worsening");
                return;
            }

            // ‚úÖ –§–∏–∫—Å–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º —É–ª—É—á—à–µ–Ω–∏—è
            if (delta.compareTo(activeOrder.getMaxChangePnl() != null ? activeOrder.getMaxChangePnl() : BigDecimal.ZERO) > 0) {
                activeOrder.setMaxChangePnl(delta);
            }

                            // ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ > +0.1% –∏ –æ—Ç–∫–∞—Ç ‚â•30% ‚Üí —Ö–µ–¥–∂ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏)
                BigDecimal maxImp = activeOrder.getMaxChangePnl() != null ? activeOrder.getMaxChangePnl() : BigDecimal.ZERO;
                if (maxImp.compareTo(BigDecimal.valueOf(0.1)) > 0 &&
                        delta.compareTo(maxImp.multiply(BigDecimal.valueOf(0.7))) <= 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–≤–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∫ –≤ Python)
                if (session.hasBothPositionsActive()) {
                    log.warn("‚ö†Ô∏è Session {} ‚Üí HEDGE BLOCKED (two positions already active)", session.getId());
                    return;
                }
                
                log.info("üõ°Ô∏è Session {} ‚Üí OPEN HEDGE (improvement {}%, pullback ‚â•30%)",
                        session.getId(), maxImp);
                TradingDirection hedgeDirection = getOppositeDirection(activeOrder.getDirection());
                executeOpenHedge(session, hedgeDirection, "HEDGE_OPEN", price, "improvement");
                return;
            }
        }
    }

    /**
     * –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∫ –≤ Python apply_two_positions_logic)
     */
    private void applyTwoPositionsLogic(TradeSession session, BigDecimal price) {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä –∏ —Ö–µ–¥–∂
        TradeOrder mainOrder = session.getMainOrder();
        TradeOrder hedgeOrder = session.getLastHedgeOrder();
        
        if (mainOrder == null || mainOrder.getPrice() == null || mainOrder.getPrice().compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ö†Ô∏è Session {}: Main order is null, has no price, or price is zero, skipping hedge monitoring", session.getId());
            return;
        }
        
        if (hedgeOrder == null || hedgeOrder.getPrice() == null || hedgeOrder.getPrice().compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ö†Ô∏è Session {}: Hedge order is null, has no price, or price is zero, skipping hedge monitoring", session.getId());
            return;
        }
        
        BigDecimal entryMain = mainOrder.getPrice();
        BigDecimal entryHedge = hedgeOrder.getPrice();

        // PnL –¥–ª—è main –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python)
        BigDecimal pnlMain;
        if (mainOrder.getDirection() == TradingDirection.LONG) {
            // LONG: ((current_price - entry_price) / entry_price * 100)
            pnlMain = price.subtract(entryMain)
                    .divide(entryMain, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
        } else {
            // SHORT: ((entry_price - current_price) / entry_price * 100)
            pnlMain = entryMain.subtract(price)
                    .divide(entryMain, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
        }

        // PnL –¥–ª—è hedge –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python)
        BigDecimal pnlHedge;
        if (hedgeOrder.getDirection() == TradingDirection.LONG) {
            // LONG: ((current_price - entry_price) / entry_price * 100)
            pnlHedge = price.subtract(entryHedge)
                    .divide(entryHedge, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
        } else {
            // SHORT: ((entry_price - current_price) / entry_price * 100)
            pnlHedge = entryHedge.subtract(price)
                    .divide(entryHedge, 8, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∫ –≤ Python)
        String bestDirection = pnlMain.compareTo(pnlHedge) > 0 ? "MAIN" : "HEDGE";
        String worstDirection = pnlMain.compareTo(pnlHedge) > 0 ? "HEDGE" : "MAIN";
        BigDecimal bestPnl = pnlMain.compareTo(pnlHedge) > 0 ? pnlMain : pnlHedge;
        BigDecimal worstPnl = pnlMain.compareTo(pnlHedge) > 0 ? pnlHedge : pnlMain;
        TradeOrder bestOrder = pnlMain.compareTo(pnlHedge) > 0 ? mainOrder : hedgeOrder;
        TradeOrder worstOrder = pnlMain.compareTo(pnlHedge) > 0 ? hedgeOrder : mainOrder;

        log.info("üèÜ Session {}: BEST={} {}% | WORST={} {}%",
                session.getId(), bestDirection, bestPnl,
                worstDirection, worstPnl);

        // === –¢–†–ï–ô–õ–ò–ù–ì –¥–ª—è –ª—É—á—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ ===
        if (checkTrailing(bestOrder, bestPnl)) {
            log.info("üìâ Session {} ‚Üí CLOSE {} (TRAILING BEST)", session.getId(), bestDirection);
            executeClosePosition(session, bestOrder, SessionMode.HEDGING, "TRAILING_BEST");
            
            // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ª—É—á—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ö—É–¥—à–µ–π
            if (worstOrder.getBasePnl() == null) {
                startTracking(worstOrder, worstPnl);
            }
            return;
        }

        // –ü–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö —Ö–µ–¥–∂–µ–π (–∫–∞–∫ –≤ Python)
        if (session.hasBothPositionsActive()) {
            log.warn("‚ö†Ô∏è Session {} ‚Üí HEDGE BLOCKED (two positions already active)", session.getId());
            return;
        }

        // === –ï—Å–ª–∏ worst —Å–Ω–æ–≤–∞ –≤ –∑–æ–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ===
        if (worstPnl.compareTo(BigDecimal.valueOf(-0.3)) <= 0 && worstOrder.getBasePnl() == null) {
            startTracking(worstOrder, worstPnl);
        }

        // –ï—Å–ª–∏ tracking –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (worstOrder.getBasePnl() == null) {
            return;
        }

        BigDecimal delta = worstPnl.subtract(worstOrder.getBasePnl());

        // ‚úÖ –£—Ö—É–¥—à–µ–Ω–∏–µ WORST –Ω–∞ -0.1% ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ö–µ–¥–∂ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è)
        if (delta.compareTo(BigDecimal.valueOf(-0.1)) <= 0) {
            TradingDirection oppositeDirection = getOppositeDirection(worstOrder.getDirection());

            // ‚ùó –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–≥–æ –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ Python)
            boolean hasOppositePosition =
                    (session.isActiveLong() && oppositeDirection == TradingDirection.LONG) ||
                    (session.isActiveShort() && oppositeDirection == TradingDirection.SHORT);

            if (hasOppositePosition) {
                log.warn("‚ö†Ô∏è Session {} ‚Üí RE-HEDGE BLOCKED (opposite position already active)", session.getId());
                return;
            }

            log.info("üõ°Ô∏è Session {} ‚Üí RE-HEDGE {} (worsening WORST {}% from {}%)",
                    session.getId(), oppositeDirection, delta, worstOrder.getBasePnl());
            executeOpenHedge(session, oppositeDirection, "HEDGE_OPEN", price, "re_hedge_worsening");
            return;
        }

                    // ‚úÖ –§–∏–∫—Å–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º —É–ª—É—á—à–µ–Ω–∏—è
            if (delta.compareTo(worstOrder.getMaxChangePnl() != null ? worstOrder.getMaxChangePnl() : BigDecimal.ZERO) > 0) {
                worstOrder.setMaxChangePnl(delta);
            }

        // ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ > +0.1% –∏ –æ—Ç–∫–∞—Ç ‚â•30% ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ö–µ–¥–∂ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è)
        BigDecimal maxImp = worstOrder.getMaxChangePnl() != null ? worstOrder.getMaxChangePnl() : BigDecimal.ZERO;
        if (maxImp.compareTo(BigDecimal.valueOf(0.1)) > 0 &&
                delta.compareTo(maxImp.multiply(BigDecimal.valueOf(0.7))) <= 0) {
            TradingDirection oppositeDirection = getOppositeDirection(worstOrder.getDirection());

            // ‚ùó –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–≥–æ –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ Python)
            boolean hasOppositePosition =
                    (session.isActiveLong() && oppositeDirection == TradingDirection.LONG) ||
                    (session.isActiveShort() && oppositeDirection == TradingDirection.SHORT);

            if (hasOppositePosition) {
                log.warn("‚ö†Ô∏è Session {} ‚Üí RE-HEDGE BLOCKED (opposite position already active)", session.getId());
                return;
            }

            log.info("üõ°Ô∏è Session {} ‚Üí RE-HEDGE {} (improvement WORST {}%, pullback ‚â•30%)",
                    session.getId(), oppositeDirection, maxImp);
            executeOpenHedge(session, oppositeDirection, "HEDGE_OPEN", price, "re_hedge_improvement");
            return;
        }
    }

    private TradingDirection getOppositeDirection(TradingDirection direction) {
        return direction == TradingDirection.LONG ? TradingDirection.SHORT : TradingDirection.LONG;
    }
}
