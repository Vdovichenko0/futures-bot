package io.cryptobot.binance.trading.monitoring.v2;

import io.cryptobot.binance.trade.session.enums.SessionMode;
import io.cryptobot.binance.trade.session.enums.TradingDirection;
import io.cryptobot.binance.trade.session.model.TradeOrder;
import io.cryptobot.binance.trade.session.model.TradeSession;
import io.cryptobot.binance.trade.session.service.TradeSessionService;
import io.cryptobot.binance.trading.updates.TradingUpdatesService;
import io.cryptobot.market_data.ticker24h.Ticker24hService;
import io.cryptobot.binance.order.enums.OrderStatus;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;
import io.cryptobot.binance.trade.session.enums.SessionStatus;
import io.cryptobot.binance.order.enums.OrderPurpose;

/**
 * MonitoringServiceV2Impl - –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –≤–µ—Ä—Å–∏–∏ 2
 * 
 * –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:
 * 
 * 1. –û–î–ù–ê –ü–û–ó–ò–¶–ò–Ø:
 *    - –¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ PnL >= 0.1%
 *    - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ 30% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ PnL
 *    - –•–µ–¥–∂ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ PnL <= -0.03%
 * 
 * 2. –î–í–ï –ü–û–ó–ò–¶–ò–ò:
 *    - –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π +0.1% PnL –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É–±—ã—Ç–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
 *    - –¢—Ä–µ–π–ª–∏–Ω–≥ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (0.1% –∞–∫—Ç–∏–≤–∞—Ü–∏—è, 30% –æ—Ç–∫–∞—Ç)
 * 
 * 3. –ó–ê–ö–†–´–¢–ò–ï –û–†–î–ï–†–û–í:
 *    - –î–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
 *    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 *    - –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MonitoringServiceV2Impl implements MonitoringServiceV2 {

    // === –ö–û–ù–°–¢–ê–ù–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–∞—É—Ç—ã
    private static final long MONITORING_INTERVAL_MS = 1_000;                   // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 1 —Å–µ–∫
    private static final long ORDER_COOLDOWN_MS = 10_000;                       // –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏ 10 —Å–µ–∫

    // PnL –ø–æ—Ä–æ–≥–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    private static final BigDecimal PERCENTAGE_MULTIPLIER = BigDecimal.valueOf(100);          // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    
    // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏–∫–∏
    private static final BigDecimal NEW_TRAILING_ACTIVATION_THRESHOLD = BigDecimal.valueOf(0.1);  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PnL –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ 0.1%
    private static final BigDecimal NEW_TRAILING_CLOSE_RATIO = BigDecimal.valueOf(0.7);          // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ 30% –æ—Ç–∫–∞—Ç–∞ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ (70% –æ—Ç –º–∞–∫—Å)
    private static final BigDecimal HEDGE_OPEN_THRESHOLD = BigDecimal.valueOf(-0.03);            // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–∂–∞ –ø—Ä–∏ -0.03%
    private static final BigDecimal PROFITABLE_POSITION_THRESHOLD = BigDecimal.valueOf(0.1);     // –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ +0.1% –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —É–±—ã—Ç–æ—á–Ω–æ–π
    
    // –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    private final TradeSessionService sessionService;
    private final Ticker24hService ticker24hService;
    private final TradingUpdatesService tradingUpdatesService;

    private final Map<String, TradeSession> sessions = new HashMap<>();
    // Per-session order cooldown to avoid rapid consecutive open/close calls
    private final Map<String, Long> lastOrderAtMsBySession = new HashMap<>();

    @PostConstruct
    public void init() {
        List<TradeSession> ses = sessionService.getAllActive();
        for (TradeSession tradeSession : ses) {
            sessions.put(tradeSession.getId(), tradeSession);
        }

    }

    @Override
    public void addToMonitoring(TradeSession tradeSession) {
        sessions.put(tradeSession.getId(), tradeSession);
    }

    @Scheduled(fixedRate = MONITORING_INTERVAL_MS)
    public void monitor() {
//        List<TradeSession>
        Collection<TradeSession> activeSessions = sessions.values();

        for (TradeSession session : activeSessions) {
            try {
                monitorSession(session);
            } catch (Exception e) {
                log.error("‚ùå Error monitoring session {}: {}", session.getId(), e.getMessage(), e);
            }
        }
    }

    private void monitorSession(TradeSession session) {
        log.debug("üîç Starting monitoring for session {} (mode: {}, direction: {})", session.getId(), session.getCurrentMode(), session.getDirection());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è
        if (session.isProcessing()) {
            log.debug("‚è≥ Session {} is already being processed, skipping", session.getId());
            return;
        }

        // 1. –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        BigDecimal price = ticker24hService.getPrice(session.getTradePlan());
        if (price == null) {
//            log.warn("‚ö†Ô∏è Session {}: Failed to get price, skipping monitoring", session.getId());
            return;
        }
        // log.debug("üí∞ Session {}: Current price = {}", session.getId(), price);

        // === –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê (–∫–∞–∫ –≤ Python) ===
        boolean bothActive = session.hasBothPositionsActive();
        boolean anyActive = session.hasActivePosition();

        log.debug("üîç SESSION LOGIC DEBUG: Session {} - bothActive={}, anyActive={}, activeLong={}, activeShort={}", 
                session.getId(), bothActive, anyActive, session.isActiveLong(), session.isActiveShort());

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ - —Ä–µ–∂–∏–º –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π (–≤–∞–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –î–û –ø–æ–∏—Å–∫–∞ activeOrder)
        if (bothActive) {
            log.info("üõ°Ô∏è Session {}: Two positions active - HEDGING mode", session.getId());
            applyTwoPositionsLogic(session, price);
            return;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è - —Ä–µ–∂–∏–º –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if (anyActive) {
            // 2. –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            TradeOrder activeOrder = getActiveOrderForMonitoring(session);
            if (activeOrder == null || activeOrder.getPrice() == null || activeOrder.getPrice().compareTo(BigDecimal.ZERO) == 0) {
                log.warn("‚ö†Ô∏è Session {}: No active order found for monitoring, skipping", session.getId());
                return;
            }
            BigDecimal entryPrice = activeOrder.getPrice();

            // 3. PnL –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python)
            BigDecimal pnl;
            if (activeOrder.getDirection() == TradingDirection.LONG) {
                // LONG: ((current_price - entry_price) / entry_price * 100)
                pnl = price.subtract(entryPrice)
                        .divide(entryPrice, 8, RoundingMode.HALF_UP)
                        .multiply(PERCENTAGE_MULTIPLIER);
            } else {
                // SHORT: ((entry_price - current_price) / entry_price * 100)
                pnl = entryPrice.subtract(price)
                        .divide(entryPrice, 8, RoundingMode.HALF_UP)
                        .multiply(PERCENTAGE_MULTIPLIER);
            }

            log.debug("üéØ Session {}: Single position active - SCALPING mode", session.getId());
            applySinglePositionLogic(session, price, activeOrder, pnl);
            return;
        }

        log.debug("‚è≥ Session {}: No active positions", session.getId());



        // log.debug("‚úÖ Session {}: Monitoring cycle completed successfully", session.getId());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
     */
    private boolean checkNewTrailing(TradeOrder order, BigDecimal currentPnl) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π PnL
        if (currentPnl.compareTo(order.getPnlHigh() != null ? order.getPnlHigh() : BigDecimal.ZERO) > 0) {
            order.setPnlHigh(currentPnl);
        }

        // –¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ PnL >= 0.1%
        boolean isTrailingActive = order.getTrailingActive() != null && order.getTrailingActive();
        if (currentPnl.compareTo(NEW_TRAILING_ACTIVATION_THRESHOLD) >= 0 && !isTrailingActive) {
            log.info("üöÄ NEW ACTIVATE trailing (PnL: {}%)", currentPnl);
            order.setTrailingActive(true);
            order.setPnlHigh(currentPnl);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞—Ç 30% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ (NEW_TRAILING_CLOSE_RATIO = 0.7, –∑–Ω–∞—á–∏—Ç 30% –æ—Ç–∫–∞—Ç)
        if (isTrailingActive && order.getPnlHigh() != null) {
            BigDecimal retrace = order.getPnlHigh().multiply(NEW_TRAILING_CLOSE_RATIO);
            if (currentPnl.compareTo(retrace) <= 0) {
                log.info("üìâ NEW TRAILING RETRACE (high: {}%, current: {}%, retrace: {}%)",
                        order.getPnlHigh(),
                        currentPnl,
                        retrace);
                order.setTrailingActive(false);
                return true; // –ù—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
            }
        }

        return false;
    }

    // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
     */
    private void executeClosePosition(TradeSession session, TradeOrder orderToClose, SessionMode sessionMode, String reason) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (!isSessionInValidState(session)) {
                log.error("‚ùå Session validation failed for close position");
                return;
            }
            if (!isValidForClosing(orderToClose)) {
                log.error("‚ùå Order validation failed for close position: {}", orderToClose != null ? orderToClose.getOrderId() : "null");
                return;
            }

            // Cooldown: avoid spamming orders every monitor tick
            if (isInOrderCooldown(session.getId())) {
                log.warn("‚è±Ô∏è Session {} ‚Üí ORDER COOLDOWN active, skip close {}", session.getId(), orderToClose.getOrderId());
                return;
            }
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            session.setProcessing(true);

            log.info("üîß Executing close position for session {}: orderId={}, reason={}",
                    session.getId(), orderToClose.getOrderId(), reason);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OrderPurpose –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
            OrderPurpose orderPurpose;
            if (orderToClose.getPurpose() == OrderPurpose.MAIN_OPEN) {
                orderPurpose = OrderPurpose.MAIN_CLOSE;
            } else if (orderToClose.getPurpose() == OrderPurpose.HEDGE_OPEN) {
                orderPurpose = OrderPurpose.HEDGE_CLOSE;
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º HEDGE_CLOSE –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                orderPurpose = OrderPurpose.HEDGE_CLOSE;
                log.warn("‚ö†Ô∏è Unknown order purpose for order {}, using HEDGE_CLOSE", orderToClose.getOrderId());
            }

            // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ —Å–±–æ–µ
            markOrderSent(session.getId());

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            TradeSession updatedSession = tradingUpdatesService.closePosition(
                    session, sessionMode, orderToClose.getOrderId(),
                    orderToClose.getRelatedHedgeId(), orderToClose.getDirection(),
                    orderPurpose, ticker24hService.getPrice(session.getTradePlan()),
                    reason
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            updateSessionInMonitoring(updatedSession);

        } catch (Exception e) {
            log.error("‚ùå Error executing close position for session {}: {}", session.getId(), e.getMessage(), e);
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            session.setProcessing(false);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è (–ù–û–í–´–ô –ú–ï–¢–û–î)
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –∫–æ–≥–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
     */
    @SuppressWarnings("unused")
    private void executeTwoOrdersClose(TradeSession session, TradeOrder firstOrder, TradeOrder secondOrder, SessionMode sessionMode, String reason) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (!isSessionInValidState(session)) {
                log.error("‚ùå Session validation failed for two orders close");
                return;
            }
            if (!isValidForClosing(firstOrder)) {
                log.error("‚ùå First order validation failed for two orders close: {}", firstOrder != null ? firstOrder.getOrderId() : "null");
                return;
            }
            if (!isValidForClosing(secondOrder)) {
                log.error("‚ùå Second order validation failed for two orders close: {}", secondOrder != null ? secondOrder.getOrderId() : "null");
                return;
            }

            // Cooldown: avoid spamming orders every monitor tick
            if (isInOrderCooldown(session.getId())) {
                log.warn("‚è±Ô∏è Session {} ‚Üí ORDER COOLDOWN active, skip two orders close", session.getId());
                return;
            }
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            session.setProcessing(true);

            log.info("üîß Executing TWO ORDERS close for session {}: firstOrder={}, secondOrder={}, reason={}",
                    session.getId(), firstOrder.getOrderId(), secondOrder.getOrderId(), reason);

            BigDecimal currentPrice = ticker24hService.getPrice(session.getTradePlan());
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ OrderPurpose –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            OrderPurpose firstOrderPurpose = determineCloseOrderPurpose(firstOrder);
            OrderPurpose secondOrderPurpose = determineCloseOrderPurpose(secondOrder);

            // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ —Å–±–æ–µ
            markOrderSent(session.getId());

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ü–ï–†–í–û–ì–û –æ—Ä–¥–µ—Ä–∞ –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø
            log.info("üì§ Sending close request for FIRST order: {} ({})", firstOrder.getOrderId(), firstOrderPurpose);
            tradingUpdatesService.closePosition(
                    session, sessionMode, firstOrder.getOrderId(),
                    firstOrder.getRelatedHedgeId(), firstOrder.getDirection(),
                    firstOrderPurpose, currentPrice, reason + "_first"
            );

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –í–¢–û–†–û–ì–û –æ—Ä–¥–µ—Ä–∞ –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø
            log.info("üì§ Sending close request for SECOND order: {} ({})", secondOrder.getOrderId(), secondOrderPurpose);
            tradingUpdatesService.closePosition(
                    session, sessionMode, secondOrder.getOrderId(),
                    secondOrder.getRelatedHedgeId(), secondOrder.getDirection(),
                    secondOrderPurpose, currentPrice, reason + "_second"
            );

            log.info("‚úÖ TWO close requests sent successfully for session {}", session.getId());

        } catch (Exception e) {
            log.error("‚ùå Error executing two orders close for session {}: {}", session.getId(), e.getMessage(), e);
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            session.setProcessing(false);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OrderPurpose –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞
     */
    private OrderPurpose determineCloseOrderPurpose(TradeOrder order) {
        if (order.getPurpose() == OrderPurpose.MAIN_OPEN) {
            return OrderPurpose.MAIN_CLOSE;
        } else if (order.getPurpose() == OrderPurpose.HEDGE_OPEN) {
            return OrderPurpose.HEDGE_CLOSE;
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º HEDGE_CLOSE –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            log.warn("‚ö†Ô∏è Unknown order purpose for order {}, using HEDGE_CLOSE", order.getOrderId());
            return OrderPurpose.HEDGE_CLOSE;
        }
    }

    // === –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private boolean isValidOrder(TradeOrder order) {
        if (order == null) {
            log.warn("‚ö†Ô∏è Order is null");
            return false;
        }
        if (order.getOrderId() == null) {
            log.warn("‚ö†Ô∏è Order {} has null orderId", order);
            return false;
        }
        if (order.getDirection() == null) {
            log.warn("‚ö†Ô∏è Order {} has null direction", order.getOrderId());
            return false;
        }
        if (order.getPurpose() == null) {
            log.warn("‚ö†Ô∏è Order {} has null purpose", order.getOrderId());
            return false;
        }
        if (order.getPrice() == null || order.getPrice().compareTo(BigDecimal.ZERO) <= 0) {
            log.warn("‚ö†Ô∏è Order {} has invalid price: {}", order.getOrderId(), order.getPrice());
            return false;
        }
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
     */
    private boolean isDirectionCompatible(TradeSession session, TradingDirection direction) {
        if (direction == TradingDirection.LONG) {
            if (session.isActiveLong()) {
                log.warn("‚ö†Ô∏è Session {} already has active LONG position", session.getId());
                return false;
            }
        } else if (direction == TradingDirection.SHORT) {
            if (session.isActiveShort()) {
                log.warn("‚ö†Ô∏è Session {} already has active SHORT position", session.getId());
                return false;
            }
        }
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
     */
    private boolean isValidForClosing(TradeOrder order) {
        if (!isValidOrder(order)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ä–¥–µ—Ä
        if (order.getPurpose() != OrderPurpose.MAIN_OPEN && order.getPurpose() != OrderPurpose.HEDGE_OPEN) {
            log.warn("‚ö†Ô∏è Order {} is not an opening order, purpose: {}", order.getOrderId(), order.getPurpose());
            return false;
        }
        
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
     */
    private boolean isSessionInValidState(TradeSession session) {
        if (session == null) {
            log.warn("‚ö†Ô∏è Session is null");
            return false;
        }
        if (session.getId() == null) {
            log.warn("‚ö†Ô∏è Session has null ID");
            return false;
        }
        if (session.getTradePlan() == null) {
            log.warn("‚ö†Ô∏è Session {} has null trade plan", session.getId());
            return false;
        }
        return true;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
     */
    private void executeOpenHedge(TradeSession session, TradingDirection hedgeDirection, String purpose, BigDecimal currentPrice, String reason) {
        try {
            // –ó–ê–©–ò–¢–ê 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ—Ç—å—é –ø–æ–∑–∏—Ü–∏—é
            if (session.hasBothPositionsActive()) {
                log.warn("üö´ Session {} ‚Üí HEDGE EXECUTION BLOCKED: both positions already active", session.getId());
                return;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (!isSessionInValidState(session)) {
                log.error("‚ùå Session validation failed for open hedge");
                return;
            }
            if (hedgeDirection == null) {
                log.error("‚ùå Hedge direction is null for session {}", session.getId());
                return;
            }
            if (!isDirectionCompatible(session, hedgeDirection)) {
                log.error("‚ùå Hedge direction {} incompatible with session {} state", hedgeDirection, session.getId());
                return;
            }

            // Cooldown: avoid spamming orders every monitor tick
            if (isInOrderCooldown(session.getId())) {
                log.warn("‚è±Ô∏è Session {} ‚Üí ORDER COOLDOWN active, skip open hedge {}", session.getId(), hedgeDirection);
                return;
            }
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            session.setProcessing(true);

            log.info("üîß Executing open hedge for session {}: direction={}, reason={}",
                    session.getId(), hedgeDirection, reason);

            // –í—ã–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π parentOrderId: –µ—Å–ª–∏ main –∑–∞–∫—Ä—ã—Ç/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            Long parentOrderId = null;
            TradeOrder mainOrder = session.getMainOrder();
            if (mainOrder != null && mainOrder.getOrderId() != null && isMainStillActive(session)) {
                parentOrderId = mainOrder.getOrderId();
            } else {
                TradeOrder link = getLastFilledHedgeOrderByDirection(session, getOppositeDirection(hedgeDirection));
                if (link != null) parentOrderId = link.getOrderId();
            }

            // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ —Å–±–æ–µ
            markOrderSent(session.getId());

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–∂–∞
            TradeSession updatedSession = tradingUpdatesService.openPosition(
                    session, SessionMode.HEDGING, hedgeDirection,
                    OrderPurpose.HEDGE_OPEN, currentPrice,
                    reason, parentOrderId, null
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            updateSessionInMonitoring(updatedSession);

        } catch (Exception e) {
            log.error("‚ùå Error executing open hedge for session {}: {}", session.getId(), e.getMessage(), e);
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            session.setProcessing(false);
        }
    }

    private boolean isMainStillActive(TradeSession session) {
        TradeOrder main = session.getMainOrder();
        if (main == null) return false;

        // –ï—Å–ª–∏ —Ñ–ª–∞–≥–∏ —Å–µ—Å—Å–∏–∏ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ main —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî main –∑–∞–∫—Ä—ã—Ç
        if (main.getDirection() == TradingDirection.LONG && !session.isActiveLong()) {
            return false;
        }
        if (main.getDirection() == TradingDirection.SHORT && !session.isActiveShort()) {
            return false;
        }

        // –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FILLED MAIN_CLOSE/MAIN_PARTIAL_CLOSE –¥–ª—è main
        boolean hasMainClose = session.getOrders().stream()
                .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                .anyMatch(o -> (
                        OrderPurpose.MAIN_CLOSE.equals(o.getPurpose()) ||
                                OrderPurpose.MAIN_PARTIAL_CLOSE.equals(o.getPurpose())
                ) && main.getOrderId().equals(o.getParentOrderId()));

        return !hasMainClose;
    }

    private boolean isInOrderCooldown(String sessionId) {
        Long last = lastOrderAtMsBySession.get(sessionId);
        if (last == null) return false;
        return System.currentTimeMillis() - last < ORDER_COOLDOWN_MS;
    }

    private void markOrderSent(String sessionId) {
        lastOrderAtMsBySession.put(sessionId, System.currentTimeMillis());
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    private void updateSessionInMonitoring(TradeSession updatedSession) {
        if (updatedSession != null) {
            if (updatedSession.getStatus() == SessionStatus.COMPLETED) {
                // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                sessions.remove(updatedSession.getId());
                log.info("‚úÖ Session {} completed and removed from monitoring", updatedSession.getId());
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                sessions.put(updatedSession.getId(), updatedSession);
                log.info("‚úÖ Session {} updated in monitoring", updatedSession.getId());
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç, –Ω–æ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ö–µ–¥–∂ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–µ–¥–∂
     * –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
     */
    private TradeOrder getActiveOrderForMonitoring(TradeSession session) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏, –∞ –Ω–µ –Ω–∞–ª–∏—á–∏—è —Ü–µ–Ω—ã —É –æ—Ä–¥–µ—Ä–∞
        boolean activeLong = session.isActiveLong();
        boolean activeShort = session.isActiveShort();

        if (!activeLong && !activeShort) {
            return null;
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ LONG –ø–æ–∑–∏—Ü–∏—è
        if (activeLong && !activeShort) {
            if (session.getDirection() == TradingDirection.LONG) {
                return session.getMainOrder();
            } else {
                return getLastFilledHedgeOrderByDirection(session, TradingDirection.LONG);
            }
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ SHORT –ø–æ–∑–∏—Ü–∏—è
        if (activeShort && !activeLong) {
            if (session.getDirection() == TradingDirection.SHORT) {
                return session.getMainOrder();
            } else {
                return getLastFilledHedgeOrderByDirection(session, TradingDirection.SHORT);
            }
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –æ–±–µ ‚Äî –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–µ—Ä–Ω–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        return session.getMainOrder();
    }

    private TradeOrder getLastFilledHedgeOrderByDirection(TradeSession session, TradingDirection direction) {
        return session.getOrders().stream()
                .filter(o -> OrderPurpose.HEDGE_OPEN.equals(o.getPurpose()))
                .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                .filter(o -> direction.equals(o.getDirection()))
                .max(Comparator.comparing(TradeOrder::getOrderTime))
                .orElse(null);
    }

    // –ú–µ—Ç–æ–¥ hasActivePositions —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ

    /**
     * –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
     */
    private void applySinglePositionLogic(TradeSession session, BigDecimal price, TradeOrder activeOrder, BigDecimal pnl) {
        // === –ù–û–í–´–ô –¢–†–ï–ô–õ–ò–ù–ì (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ 0.1%, –æ—Ç–∫–∞—Ç 30%) ===
        if (checkNewTrailing(activeOrder, pnl)) {
            log.info("üìâ Session {} ‚Üí CLOSE POSITION (NEW TRAILING)", session.getId());
            String context = String.format("new_monitoring_trailing pnl>=%.3f retrace<=%.3f",
                    activeOrder.getPnlHigh(), activeOrder.getPnlHigh().multiply(NEW_TRAILING_CLOSE_RATIO));
            executeClosePosition(session, activeOrder, SessionMode.SCALPING, context);
            return;
        }

        // === –•–ï–î–ñ –ü–†–ò –£–ë–´–¢–ö–ï -0.03% ===
        if (pnl.compareTo(HEDGE_OPEN_THRESHOLD) <= 0) {
            // –ó–ê–©–ò–¢–ê 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–≤–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if (session.hasBothPositionsActive()) {
                log.debug("üö´ Session {} ‚Üí HEDGE BLOCKED: both positions already active (LONG={}, SHORT={})", 
                        session.getId(), session.isActiveLong(), session.isActiveShort());
                return;
            }

            TradingDirection hedgeDirection = getOppositeDirection(activeOrder.getDirection());
            
            // –ó–ê–©–ò–¢–ê 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–¥–∂–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
                if ((hedgeDirection == TradingDirection.LONG && session.isActiveLong()) ||
                        (hedgeDirection == TradingDirection.SHORT && session.isActiveShort())) {
                log.debug("üö´ Session {} ‚Üí HEDGE BLOCKED: target direction {} already active", 
                        session.getId(), hedgeDirection);
                return;
            }

            String context = String.format("new_hedge_loss pnl<=%.3f", pnl);
            log.info("üõ°Ô∏è Session {} ‚Üí OPEN HEDGE (NEW LOGIC: loss at {}%)", session.getId(), pnl);
                executeOpenHedge(session, hedgeDirection, "HEDGE_OPEN", price, context);
                return;
        }
    }

    /**
     * –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
     */
    private void applyTwoPositionsLogic(TradeSession session, BigDecimal price) {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç:
        // –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º LONG –∏ SHORT (MAIN_OPEN –∏–ª–∏ HEDGE_OPEN, FILLED, –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ)
        TradeOrder longOrder = getLatestActiveOrderByDirection(session, TradingDirection.LONG);
        TradeOrder shortOrder = getLatestActiveOrderByDirection(session, TradingDirection.SHORT);

        if (longOrder == null || shortOrder == null) {
            log.warn("‚ö†Ô∏è Session {}: Missing active LONG or SHORT for two-positions logic", session.getId());
            return;
        }

        BigDecimal entryLong = longOrder.getPrice();
        BigDecimal entryShort = shortOrder.getPrice();

        // PnL –¥–ª—è LONG
        BigDecimal pnlLong = price.subtract(entryLong)
                .divide(entryLong, 8, RoundingMode.HALF_UP)
                .multiply(PERCENTAGE_MULTIPLIER);
        // PnL –¥–ª—è SHORT
        BigDecimal pnlShort = entryShort.subtract(price)
                .divide(entryShort, 8, RoundingMode.HALF_UP)
                .multiply(PERCENTAGE_MULTIPLIER);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å–Ω—É—é –∏ —É–±—ã—Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏–∏
        boolean longIsProfitable = pnlLong.compareTo(pnlShort) > 0;
        String profitableDirection = longIsProfitable ? "LONG" : "SHORT";
        String losingDirection = longIsProfitable ? "SHORT" : "LONG";
        BigDecimal profitablePnl = longIsProfitable ? pnlLong : pnlShort;
        BigDecimal losingPnl = longIsProfitable ? pnlShort : pnlLong;
        TradeOrder profitableOrder = longIsProfitable ? longOrder : shortOrder;
        TradeOrder losingOrder = longIsProfitable ? shortOrder : longOrder;

        log.debug("üí∞ Session {}: PROFITABLE={} {}% | LOSING={} {}%",
                session.getId(), profitableDirection, profitablePnl,
                losingDirection, losingPnl);

        // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ +0.1%, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–±—ã—Ç–æ—á–Ω—É—é ===
        if (profitablePnl.compareTo(PROFITABLE_POSITION_THRESHOLD) >= 0) {
            log.info("üéØ Session {} ‚Üí CLOSE LOSING {} POSITION (profitable {} reached +0.1%)", 
                    session.getId(), losingDirection, profitableDirection);
            String context = String.format("new_two_pos_logic profitable_pnl>=%.3f close_losing",
                    profitablePnl);
            executeClosePosition(session, losingOrder, SessionMode.HEDGING, context);
            return;
        }

        // === –¢–†–ï–ô–õ–ò–ù–ì –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ===
        if (checkNewTrailing(profitableOrder, profitablePnl)) {
            log.info("üìâ Session {} ‚Üí CLOSE {} (NEW TRAILING PROFITABLE)", session.getId(), profitableDirection);
            String context = String.format("new_monitoring_trailing_profitable pnl>=%.3f retrace<=%.3f",
                    profitableOrder.getPnlHigh(), profitableOrder.getPnlHigh().multiply(NEW_TRAILING_CLOSE_RATIO));
            executeClosePosition(session, profitableOrder, SessionMode.HEDGING, context);
            return;
        }
    }

    private TradingDirection getOppositeDirection(TradingDirection direction) {
        return direction == TradingDirection.LONG ? TradingDirection.SHORT : TradingDirection.LONG;
    }

    private TradeOrder getLatestActiveOrderByDirection(TradeSession session, TradingDirection direction) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π FILLED –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ä–¥–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–∫—Ä—ã—Ç
        return session.getOrders().stream()
                .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                .filter(o -> direction.equals(o.getDirection()))
                .filter(o -> OrderPurpose.MAIN_OPEN.equals(o.getPurpose()) || OrderPurpose.HEDGE_OPEN.equals(o.getPurpose()))
                .filter(o -> !isOpenOrderClosed(session, o))
                .max(Comparator.comparing(TradeOrder::getOrderTime))
                .orElse(null);
    }

    private boolean isOpenOrderClosed(TradeSession session, TradeOrder openOrder) {
        if (OrderPurpose.MAIN_OPEN.equals(openOrder.getPurpose())) {
            return session.getOrders().stream()
                    .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                    .anyMatch(o -> (OrderPurpose.MAIN_CLOSE.equals(o.getPurpose()) || OrderPurpose.MAIN_PARTIAL_CLOSE.equals(o.getPurpose()))
                            && openOrder.getOrderId().equals(o.getParentOrderId()));
        }
        if (OrderPurpose.HEDGE_OPEN.equals(openOrder.getPurpose())) {
            return session.getOrders().stream()
                    .filter(o -> OrderStatus.FILLED.equals(o.getStatus()))
                    .anyMatch(o -> (OrderPurpose.HEDGE_CLOSE.equals(o.getPurpose()) || OrderPurpose.HEDGE_PARTIAL_CLOSE.equals(o.getPurpose()))
                            && openOrder.getOrderId().equals(o.getParentOrderId()));
        }
        return false;
    }
}
