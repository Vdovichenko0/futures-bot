//package io.cryptobot.binance.trading.monitoring.v3.utils;
//
//import io.cryptobot.binance.trade.session.enums.SessionMode;
//import io.cryptobot.binance.trade.session.enums.TradingDirection;
//import io.cryptobot.binance.trade.session.model.TradeOrder;
//import io.cryptobot.binance.trade.session.model.TradeSession;
//import io.cryptobot.binance.trade.session.service.TradeSessionService;
//import io.cryptobot.binance.trading.monitoring.v3.help.MonitorHelper;
//import io.cryptobot.binance.trading.monitoring.v3.models.FollowUpState;
//import io.cryptobot.binance.trading.monitoring.v3.models.SingleTrackState;
//import io.cryptobot.binance.trading.updates.TradingUpdatesService;
//import io.cryptobot.market_data.ticker24h.Ticker24hService;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.stereotype.Component;
//
//import java.math.BigDecimal;
//import java.math.RoundingMode;
//
//@Slf4j
//@Component
//@RequiredArgsConstructor
//public class SinglePositionLogic {
//    // PnL –≤ %
//    private static final BigDecimal PERCENTAGE_MULTIPLIER = BigDecimal.valueOf(100);
//
//    // –ö–æ–º–∏—Å—Å–∏—è (–≤ –ø—Ä–æ—Ü.–ø—É–Ω–∫—Ç–∞—Ö), —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ
//    private static final BigDecimal COMMISSION_PCT = new BigDecimal("0.036"); // 0.036%
//
//    // –¢—Ä–µ–π–ª–∏–Ω–≥
//    private static final BigDecimal TRAILING_ACTIVATION_THRESHOLD_PCT = new BigDecimal("0.10"); // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +0.10%
//    private static final BigDecimal TRAILING_CLOSE_RETRACE_RATIO     = new BigDecimal("0.80");  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ 20% –æ—Ç–∫–∞—Ç–∞
//
//    // –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞–Ω–Ω–∏–π —Ö–µ–¥–∂
//    private static final BigDecimal SINGLE_TRACKING_START_PCT        = new BigDecimal("-0.20"); // –°—Ç–∞—Ä—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ -0.20%
//    private static final BigDecimal SINGLE_EARLY_HEDGE_PCT           = new BigDecimal("-0.10"); // –†–∞–Ω–Ω–∏–π —Ö–µ–¥–∂ –¥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
//    private static final BigDecimal SINGLE_WORSEN_DELTA_PCT          = new BigDecimal("-0.10"); // –£—Ö—É–¥—à–µ–Ω–∏–µ –æ—Ç baseline ‚Üí —Ö–µ–¥–∂
//    private static final BigDecimal SINGLE_IMPROVE_DELTA_PCT         = new BigDecimal("0.10");  // –£–ª—É—á—à–µ–Ω–∏–µ > +0.10% ‚Üí –∂–¥—ë–º –æ—Ç–∫–∞—Ç ‚â•30% –∏ —Ö–µ–¥–∂
//
//    // –î–≤–µ –ø–æ–∑–∏—Ü–∏–∏
//    private static final BigDecimal TWO_POS_PROFITABLE_ACTIVATION_PCT= new BigDecimal("0.10");  // –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∞ —É best
//
//    // === –°–ï–†–í–ò–°–´ –ò –°–û–°–¢–û–Ø–ù–ò–ï ===
//    private final TradeSessionService sessionService;
//    private final Ticker24hService ticker24hService;
//    private final TradingUpdatesService tradingUpdatesService;
//    private final CheckTrailing checkTrailing;
//    private final MonitorHelper monitorHelper;
//
//    // --- SINGLE POSITION ---
//    private void applySinglePositionLogic(TradeSession session, BigDecimal price, TradeOrder order, BigDecimal pnl) {
//        // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å follow-up (–ø–æ—Å–ª–µ –¥–≤—É—Ö –Ω–æ–≥) ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç—Ä–æ–≥–æ —Å —É–±—ã—Ç–æ—á–Ω–æ–π –Ω–æ–≥–æ–π
//        FollowUpState fu = followUpBySession.get(session.getId());
//        if (fu != null) {
//            handleFollowUpSingle(session, price, fu);
//            return;
//        }
//
//        // –æ–±—ã—á–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ –≤ –ø–ª—é—Å ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º
//        if (checkTrailing.checkNewTrailing(order, pnl)) {
//            log.info("üí∞ {} CLOSING position: PnL={}%, high={}%, entry={}, current={}, direction={}",
//                    session.getId(),
//                    pnl.setScale(3, RoundingMode.HALF_UP),
//                    monitorHelper.nvl(order.getPnlHigh()).setScale(3, RoundingMode.HALF_UP),
//                    order.getPrice().setScale(8, RoundingMode.HALF_UP),
//                    price.setScale(8, RoundingMode.HALF_UP),
//                    order.getDirection());
//            executeClosePosition(session, order, SessionMode.SCALPING,
//                    String.format("single_trailing high=%.3f retrace<=%.3f",
//                            monitorHelper.nvl(order.getPnlHigh()),
//                            monitorHelper.nvl(order.getPnlHigh()).multiply(TRAILING_CLOSE_RETRACE_RATIO).subtract(COMMISSION_PCT)));
//            singleTrackBySession.remove(session.getId());
//            return;
//        }
//
//        // —Ä–∞–Ω–Ω–∏–π —Ö–µ–¥–∂ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞
//        SingleTrackState st = singleTrackBySession.get(session.getId());
//        if (st == null && pnl.compareTo(SINGLE_EARLY_HEDGE_PCT) <= 0) {
//            TradingDirection hedgeDir = monitorHelper.opposite(order.getDirection());
//            log.info("‚ö†Ô∏è {} early hedge: pnl={}% <= {}% (before tracking), entry={}, current={}, direction={}",
//                    session.getId(), pnl.setScale(3, RoundingMode.HALF_UP), SINGLE_EARLY_HEDGE_PCT,
//                    order.getPrice().setScale(8, RoundingMode.HALF_UP),
//                    price.setScale(8, RoundingMode.HALF_UP),
//                    order.getDirection());
//            executeOpenHedge(session, hedgeDir, "HEDGE_OPEN", price,
//                    String.format("early_hedge pnl<=%.3f before_tracking", SINGLE_EARLY_HEDGE_PCT));
//            return;
//        }
//
//        // —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏ -0.20%
//        if (st == null && pnl.compareTo(SINGLE_TRACKING_START_PCT) <= 0) {
//            st = SingleTrackState.builder()
//                    .baseline(pnl)
//                    .tracking(true)
//                    .trailActive(false)
//                    .trailHigh(pnl) // –æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞—á–Ω—ë–º —É–ª—É—á—à–µ–Ω–∏–µ
//                    .build();
//            singleTrackBySession.put(session.getId(), st);
//            log.info("üß≠ {} single tracking start baseline={}%", session.getId(), st.getBaseline());
//            return;
//        }
//
//        // –µ—Å–ª–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –¥–µ–ª—å—Ç–∞–º –∫ baseline
//        if (st != null && st.isTracking()) {
//            BigDecimal delta = pnl.subtract(st.getBaseline());
//
//            // —É—Ö—É–¥—à–µ–Ω–∏–µ -0.10 ‚Üí —Ö–µ–¥–∂
//            if (delta.compareTo(SINGLE_WORSEN_DELTA_PCT) <= 0) {
//                TradingDirection hedgeDir = monitorHelper.opposite(order.getDirection());
//                log.info("üìâ {} single tracking WORSEN: delta={}% <= {}% (baseline={}%), current PnL={}%, entry={}, current={}",
//                        session.getId(), delta.setScale(3, RoundingMode.HALF_UP),
//                        SINGLE_WORSEN_DELTA_PCT, st.getBaseline().setScale(3, RoundingMode.HALF_UP),
//                        pnl.setScale(3, RoundingMode.HALF_UP),
//                        order.getPrice().setScale(8, RoundingMode.HALF_UP),
//                        price.setScale(8, RoundingMode.HALF_UP));
//                executeOpenHedge(session, hedgeDir, "HEDGE_OPEN", price,
//                        String.format("single_tracking_worsen delta<=%.3f from %.3f", SINGLE_WORSEN_DELTA_PCT, st.getBaseline()));
//                singleTrackBySession.remove(session.getId());
//                return;
//            }
//
//            // —É–ª—É—á—à–µ–Ω–∏–µ > +0.10 ‚Üí –≤–∫–ª—é—á–∞–µ–º ¬´–º—è–≥–∫–∏–π —Ç—Ä–µ–π–ª¬ª: –∂–¥—ë–º –æ—Ç–∫–∞—Ç ‚â•80% –æ—Ç high (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏) –∏ –û–¢–ö–†–´–í–ê–ï–ú –•–ï–î–ñ
//            // FIX: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º soft-trail —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π pnl > 0 (—Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)
//            if (!st.isTrailActive() && delta.compareTo(SINGLE_IMPROVE_DELTA_PCT) > 0 && pnl.compareTo(BigDecimal.ZERO) > 0) {
//                st.setTrailActive(true);
//                st.setTrailHigh(pnl);
//                log.info("üöÄ {} single soft-trail ENABLED: delta={}% > {}% (baseline={}%), pnl>0",
//                        session.getId(), delta.setScale(3, RoundingMode.HALF_UP),
//                        SINGLE_IMPROVE_DELTA_PCT, st.getBaseline().setScale(3, RoundingMode.HALF_UP));
//            }
//            if (st.isTrailActive()) {
//                // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π high
//                if (pnl.compareTo(st.getTrailHigh()) > 0) {
//                    BigDecimal oldHigh = st.getTrailHigh();
//                    st.setTrailHigh(pnl);
//                    log.info("üìà {} single soft-trail high updated: {}% ‚Üí {}%",
//                            session.getId(), oldHigh.setScale(3, RoundingMode.HALF_UP), pnl.setScale(3, RoundingMode.HALF_UP));
//                }
//
//                // FIX: –µ—Å–ª–∏ high ‚â§ 0 ‚Äî –Ω–µ –∞—Ä–º–∏–º –æ—Ç–∫–∞—Ç (–µ—â—ë –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Ç—Ä–µ–π–ª–∞)
//                if (st.getTrailHigh().compareTo(BigDecimal.ZERO) <= 0) {
//                    return; // –∂–¥—ë–º, –ø–æ–∫–∞ –≤—ã–π–¥–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∑–æ–Ω—É
//                }
//
//                BigDecimal softRetrace = st.getTrailHigh().multiply(TRAILING_CLOSE_RETRACE_RATIO).subtract(COMMISSION_PCT);
//                // FIX: –Ω–µ –æ–±–Ω—É–ª—è–µ–º softRetrace –¥–æ 0; –µ—Å–ª–∏ ‚â§0 ‚Äî –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º
//                if (softRetrace.compareTo(BigDecimal.ZERO) > 0 && pnl.compareTo(softRetrace) <= 0) {
//                    TradingDirection hedgeDir = monitorHelper.opposite(order.getDirection());
//                    log.info("üî¥ {} single soft-trail TRIGGERED: current={}% <= retrace={}% (high={}%), entry={}, current={}",
//                            session.getId(), pnl.setScale(3, RoundingMode.HALF_UP),
//                            softRetrace.setScale(3, RoundingMode.HALF_UP),
//                            st.getTrailHigh().setScale(3, RoundingMode.HALF_UP),
//                            order.getPrice().setScale(8, RoundingMode.HALF_UP),
//                            price.setScale(8, RoundingMode.HALF_UP));
//                    executeOpenHedge(session, hedgeDir, "HEDGE_OPEN", price,
//                            String.format("single_soft_trail_retrace high=%.3f retrace<=%.3f", st.getTrailHigh(), softRetrace));
//                    singleTrackBySession.remove(session.getId());
//                    return;
//                }
//            }
//        }
//    }
//}
