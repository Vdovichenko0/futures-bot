package io.cryptobot.utils.logging;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Component
public class TradingLogAnalyzer {
    
    private static final String LOGS_DIR = "logs/trading";
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è "OK" –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
     */
    public List<SignalEntry> getFinalDecisions(String symbol, String date) {
        return findFinalDecisions(symbol, date);
    }
    

    

    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –º–æ–º–µ–Ω—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π "OK" –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
     */
    public List<SignalEntry> findFinalDecisions(String symbol, String date) {
        String fileName = String.format("%s/%s_%s.log", LOGS_DIR, symbol.toLowerCase(), date);
        File file = new File(fileName);
        
        if (!file.exists()) {
            return Collections.emptyList();
        }
        
        List<SignalEntry> finalDecisions = new ArrayList<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            LocalDateTime decisionTime = null;
            String signal = null;
            
            while ((line = reader.readLine()) != null) {
                if (line.contains("üìä Final Signal:")) {
                    LocalDateTime timestamp = extractTimestamp(line);
                    String currentSignal = extractSignal(line);
                    
                    // –ò—â–µ–º —Ç–æ–ª—å–∫–æ LONG –∏–ª–∏ SHORT —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ NO SIGNAL)
                    if ("LONG".equals(currentSignal) || "SHORT".equals(currentSignal)) {
                        decisionTime = timestamp;
                        signal = currentSignal;
                        
                        // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                        Map<String, String> indicators = extractIndicatorsForDecision(fileName, timestamp);
                        
                        finalDecisions.add(new SignalEntry(
                            signal,
                            1, // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                            decisionTime,
                            decisionTime,
                            indicators
                        ));
                    }
                }
            }
        } catch (IOException e) {
            log.error("Failed to find final decisions for {}: {}", symbol, e.getMessage());
        }
        
        return finalDecisions;
    }
    

    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
     */
    private Map<String, String> extractIndicatorsForDecision(String fileName, LocalDateTime decisionTime) {
        Map<String, String> indicators = new HashMap<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            LocalDateTime currentTimestamp = null;
            boolean foundDecision = false;
            
            while ((line = reader.readLine()) != null) {
                LocalDateTime timestamp = extractTimestamp(line);
                if (timestamp != null) {
                    currentTimestamp = timestamp;
                    
                    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    if (timestamp.equals(decisionTime)) {
                        foundDecision = true;
                    }
                    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    else if (foundDecision && timestamp.isAfter(decisionTime.plusSeconds(5))) {
                        break;
                    }
                }
                
                if (foundDecision && currentTimestamp != null) {
                    // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ª–æ–≥–∞—Ö
                    if (line.contains("EMA ‚Üí")) {
                        indicators.put("ema", line.substring(line.indexOf("EMA ‚Üí")));
                    } else if (line.contains("VolRatio ‚Üí")) {
                        indicators.put("volume", line.substring(line.indexOf("VolRatio ‚Üí")));
                    } else if (line.contains("Imbalance ‚Üí")) {
                        indicators.put("imbalance", line.substring(line.indexOf("Imbalance ‚Üí")));
                    } else if (line.contains("Long%=")) {
                        indicators.put("longShort", line.substring(line.indexOf("Long%=")));
                    }
                }
            }
        } catch (IOException e) {
            log.error("Failed to extract indicators for decision: {}", e.getMessage());
        }
        
        return indicators;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    private Map<String, String> extractIndicatorsFromLog(String fileName, LocalDateTime start, LocalDateTime end) {
        Map<String, String> indicators = new HashMap<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            boolean inRange = false;
            LocalDateTime currentTimestamp = null;
            
            while ((line = reader.readLine()) != null) {
                LocalDateTime timestamp = extractTimestamp(line);
                if (timestamp != null) {
                    currentTimestamp = timestamp;
                    if (timestamp.isAfter(start) && timestamp.isBefore(end)) {
                        inRange = true;
                    } else if (timestamp.isAfter(end)) {
                        break;
                    }
                }
                
                if (inRange && currentTimestamp != null) {
                    // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ª–æ–≥–∞—Ö
                    if (line.contains("EMA ‚Üí")) {
                        indicators.put("ema", line.substring(line.indexOf("EMA ‚Üí")));
                    } else if (line.contains("VolRatio ‚Üí")) {
                        indicators.put("volume", line.substring(line.indexOf("VolRatio ‚Üí")));
                    } else if (line.contains("Imbalance ‚Üí")) {
                        indicators.put("imbalance", line.substring(line.indexOf("Imbalance ‚Üí")));
                    } else if (line.contains("Long%=")) {
                        indicators.put("longShort", line.substring(line.indexOf("Long%=")));
                    }
                }
            }
        } catch (IOException e) {
            log.error("Failed to extract indicators: {}", e.getMessage());
        }
        
        return indicators;
    }
    
    private LocalDateTime extractTimestamp(String line) {
        try {
            if (line.startsWith("[") && line.contains("]")) {
                String timeStr = line.substring(1, line.indexOf("]"));
                // –°–æ–∑–¥–∞–µ–º LocalDateTime —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑ –ª–æ–≥–∞
                LocalDateTime now = LocalDateTime.now();
                String[] timeParts = timeStr.split(":");
                int hour = Integer.parseInt(timeParts[0]);
                int minute = Integer.parseInt(timeParts[1]);
                String[] secondParts = timeParts[2].split("\\.");
                int second = Integer.parseInt(secondParts[0]);
                int millisecond = Integer.parseInt(secondParts[1]);
                
                return LocalDateTime.of(now.getYear(), now.getMonth(), now.getDayOfMonth(), 
                                     hour, minute, second, millisecond * 1_000_000);
            }
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
        }
        return null;
    }
    
    private String extractSignal(String line) {
        int signalIndex = line.indexOf("Final Signal: ");
        if (signalIndex != -1) {
            return line.substring(signalIndex + 14).trim();
        }
        return "UNKNOWN";
    }
    

    
    /**
     * –ó–∞–ø–∏—Å—å —Å–µ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    public static class SignalEntry {
        private final String signal;
        private final int length;
        private final LocalDateTime startTime;
        private final LocalDateTime endTime;
        private final Map<String, String> indicators;
        
        public SignalEntry(String signal, int length, LocalDateTime startTime, LocalDateTime endTime, Map<String, String> indicators) {
            this.signal = signal;
            this.length = length;
            this.startTime = startTime;
            this.endTime = endTime;
            this.indicators = indicators;
        }
        
        // Getters
        public String getSignal() { return signal; }
        public int getLength() { return length; }
        public LocalDateTime getStartTime() { return startTime; }
        public LocalDateTime getEndTime() { return endTime; }
        public Map<String, String> getIndicators() { return indicators; }
        
        @Override
        public String toString() {
            return String.format("SignalEntry{signal='%s', length=%d, start=%s, end=%s}", 
                signal, length, startTime, endTime);
        }
    }
} 